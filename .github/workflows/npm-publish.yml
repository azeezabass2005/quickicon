name: NPM Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build --target aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: yarn build --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: yarn build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: yarn build --target x86_64-unknown-linux-musl
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: yarn build --target aarch64-unknown-linux-gnu
          # Having little issues with the musl ring library, I will come back to this later, for now Alipine Users should just use gnu version. 
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   build: yarn build --target aarch64-unknown-linux-musl
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: yarn build --target armv7-unknown-linux-gnueabihf

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.settings.target }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Setup musl tools (Linux musl)
        if: contains(matrix.settings.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          # For aarch64 musl, use the correct package
          if [ "${{ matrix.settings.target }}" = "aarch64-unknown-linux-musl" ]; then
            sudo apt-get install -y musl-dev musl
          fi

      - name: Setup cross-compile tools (Linux ARM)
        if: contains(matrix.settings.target, 'aarch64-unknown-linux') || contains(matrix.settings.target, 'armv7')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
          # Also install the corresponding standard libraries
          sudo apt-get install -y libc6-dev-arm64-cross libc6-dev-armhf-cross

      - name: Build (Unix)
        if: runner.os != 'Windows'
        run: |
          # Set linker for cross-compilation
          if [ "${{ matrix.settings.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc"
          elif [ "${{ matrix.settings.target }}" = "armv7-unknown-linux-gnueabihf" ]; then
            export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
            export RUSTFLAGS="-C linker=arm-linux-gnueabihf-gcc"
          elif [ "${{ matrix.settings.target }}" = "aarch64-unknown-linux-musl" ]; then
            # For musl, we need to use the correct linker and flags
            export RUSTFLAGS="-C linker=musl-gcc -C link-arg=-lc -C link-arg=-lm"
          elif echo "${{ matrix.settings.target }}" | grep "musl" > /dev/null; then
            # For other musl targets
            export RUSTFLAGS="-C link-arg=-lc -C link-arg=-lm"
          fi
          
          # Set up cross-compilation environment
          export PKG_CONFIG_ALLOW_CROSS=1
          export RUST_BACKTRACE=1
          
          ${{ matrix.settings.build }}
        shell: bash

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          # No OpenSSL needed for rustls
          # $env:OPENSSL_STATIC = "1"
          ${{ matrix.settings.build }}
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            *.node
          if-no-files-found: error

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish to NPM
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+"; then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}